import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;


class Solution {
    public static int distinctAverages(int[] nums) {
        int n = nums.length;
        if(n==2 || n==3) return 1;
        
        // Complexity O(n^2)
        
        // for(int i = 0; i<n; i++){
        //     for(int j=i; j<n; j++){
        //         if(nums[i]>nums[j]){
        //             int temp = nums[i];
        //             nums[i] = nums[j];
        //             nums[j] =temp;
        //         }
        //     }
        // }

        //Complexity O(NlogN)

        Arrays.sort(nums);
        Set<Double> avg = new HashSet<>();
        int left = 0;
        int right = n-1;

        while(left<right){
            avg.add((nums[right]+nums[left])/2.0);
            left++;
            right--;
        }
        return avg.size();
        
    }
    public static void main(String[] args) {
        
        
        // Test case 1
        int[] nums1 = {1, 2, 3, 4};
        System.out.println("Distinct averages for nums1: " + distinctAverages(nums1)); // Expected output: 2

        // Test case 2
        int[] nums2 = {1, 1, 1};
        System.out.println("Distinct averages for nums2: " + distinctAverages(nums2)); // Expected output: 1
        
        // Test case 3
        int[] nums3 = {5, 6, 7, 8, 9};
        System.out.println("Distinct averages for nums3: " + distinctAverages(nums3)); // Expected output: 3

        // Test case 4
        int[] nums4 = {10, 20, 30, 40, 50, 60};
        System.out.println("Distinct averages for nums4: " + distinctAverages(nums4)); // Expected output: 3
    }
}


